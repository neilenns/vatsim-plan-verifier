{
  "Typegoose model": {
    "prefix": "goose",
    "body": [
      "import { prop, getModelForClass, modelOptions, DocumentType, plugin } from \"@typegoose/typegoose\";",
      "import autopopulate from \"mongoose-autopopulate\";",
      "",
      "@plugin(autopopulate)",
      "@modelOptions({",
      "  options: { customName: \"${TM_FILENAME_BASE/(.*)/${1:/downcase}/}\" },",
      "  schemaOptions: {",
      "    toJSON: { virtuals: true, aliases: false },",
      "    toObject: { virtuals: true, aliases: false },",
      "  },",
      "})",
      "export class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {",
      "  @prop({ required: true })",
      "  someProp!: string;",
      "}",
      "",
      "// Define the model",
      "export const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Model = getModelForClass(${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/});",
      "export type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Document = DocumentType<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}>;"
    ],
    "description": "Define a class with the filename and Model"
  },
  "Wrap in Types.ObjectId": {
    "prefix": "wrapoid",
    "body": ["new Types.ObjectId($TM_SELECTED_TEXT)"],
    "description": "Wrap selected text in Types.ObjectID()"
  },
  "Extended airport info": {
    "prefix": "eai",
    "body": [
      "{",
      "  airportCode: \"$1\",",
      "  defaultInitialAltitudeText: \"$2\",",
      "  defaultExpectInMinutesText: \"$3 minutes\",",
      "  hasSIDs: false,",
      "},",
      ""
    ],
    "description": "Extended airport info"
  },
  "Departure chart": {
    "prefix": "charts",
    "body": ["    Charts: {", "      skyvector: \"$1\",", "    },", ""],
    "description": "Departure chart"
  },
  "Verifier unit test": {
    "prefix": "vtest",
    "body": [
      "import { expect } from \"chai\";",
      "import { describe, it } from \"mocha\";",
      "import { getFlightPlan } from \"../../src/controllers/flightPlans.mjs\";",
      "import ${TM_FILENAME_BASE/(.*)\\..+$/$1/} from \"../../src/controllers/verifiers/${TM_FILENAME_BASE/(.*)\\..+$/$1/}.mjs\";",
      "import { FlightPlanDocument } from \"../../src/models/FlightPlan.mjs\";",
      "import { VerifierResultModel } from \"../../src/models/VerifierResult.mjs\";",
      "import { SuccessResult } from \"../../src/types/result.mjs\";",
      "import {",
      "  addFlightPlans,",
      "  removeFlightPlans,",
      "} from \"../setup/manageFlightPlans.mjs\";",
      "",
      "const testData = [",
      "];",
      "",
      "describe(\"verifier: ${TM_FILENAME_BASE/(.*)\\..+$/$1/} tests\", () => {",
      "  before(",
      "    \"Add flight plans for tests\",",
      "    async () => await addFlightPlans(testData)",
      "  );",
      "",
      "  after(",
      "    \"Remove flight plans for tests\",",
      "    async () => await removeFlightPlans(testData)",
      "  );",
      "",
      "  it(\"a test\", async () => {",
      "    const flightPlan = await getFlightPlan(\"$2\");",
      "    expect(flightPlan.success).to.equal(true);",
      "",
      "    const result = await ${TM_FILENAME_BASE/(.*)\\..+$/$1/}(",
      "      (flightPlan as SuccessResult<FlightPlanDocument>).data",
      "    );",
      "",
      "    expect(result.success).to.equal(true);",
      "",
      "    const data = (result as SuccessResult<VerifierResultModel>).data;",
      "    expect(data.status).to.equal(\"$3\");",
      "    expect(data.flightPlanPart).to.equal(\"$4\");",
      "    expect(data.messageId).to.equal(\"$5\");",
      "  });",
      "});",
      ""
    ],
    "description": "Verifier test"
  },
  "Create a verifier": {
    "prefix": "verif",
    "isFileTemplate": true,
    "body": [
      "import { IFlightPlan } from \"../../models/FlightPlan.mjs\";",
      "import { VerifierResultModel } from \"../../models/VerifierResult.mjs\";",
      "import VerifierControllerResult from \"../../types/verifierControllerResult.mjs\";",
      "import debug from \"debug\";",
      "",
      "const verifierName = \"${TM_FILENAME_BASE}\";",
      "const logger = debug(`plan-verifier:\\${verifierName}`);",
      "",
      "export default async function ${TM_FILENAME_BASE}({",
      "  _id,",
      "  equipmentSuffix,",
      "}: IFlightPlan): Promise<VerifierControllerResult> {",
      "  // Set up the default result for a successful run of the verifier.",
      "  let result: VerifierControllerResult = {",
      "    success: true,",
      "    data: new VerifierResultModel({",
      "      flightPlanId: _id,",
      "      verifier: verifierName,",
      "      flightPlanPart: \"$2\",",
      "      priority: 5,",
      "    }),",
      "  };",
      "",
      "  try {",
      "    // This is the test the verifier is supposed to do.",
      "    if () {",
      "      result.data.status = \"Error\";",
      "      result.data.message = ``;",
      "      result.data.priority = 3;",
      "    } else {",
      "      result.data.status = \"Information\";",
      "      result.data.message = ``;",
      "    }",
      "",
      "    await result.data.save();",
      "  } catch (error) {",
      "    logger(`Error running ${TM_FILENAME_BASE}: ${error}`);",
      "",
      "    result = {",
      "      success: false,",
      "      errorType: \"UnknownError\",",
      "      error: `Error running ${TM_FILENAME_BASE}: ${error}`,",
      "    };",
      "  }",
      "",
      "  return result;",
      "}",
      ""
    ],
    "description": "Create a verifier"
  }
}
